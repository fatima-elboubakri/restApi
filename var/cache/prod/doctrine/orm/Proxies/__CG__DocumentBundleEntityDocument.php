<?php

namespace Proxies\__CG__\DocumentBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Document extends \DocumentBundle\Entity\Document implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'id', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'nomDocument', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'nomDest', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'dateDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'objetDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'contenuDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'oranDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'logoDoc'];
        }

        return ['__isInitialized__', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'id', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'nomDocument', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'nomDest', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'dateDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'objetDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'contenuDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'oranDoc', '' . "\0" . 'DocumentBundle\\Entity\\Document' . "\0" . 'logoDoc'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Document $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomDocument($nomDocument)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomDocument', [$nomDocument]);

        return parent::setNomDocument($nomDocument);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomDocument', []);

        return parent::getNomDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomDest($nomDest)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomDest', [$nomDest]);

        return parent::setNomDest($nomDest);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomDest()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomDest', []);

        return parent::getNomDest();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDoc($dateDoc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDoc', [$dateDoc]);

        return parent::setDateDoc($dateDoc);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDoc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDoc', []);

        return parent::getDateDoc();
    }

    /**
     * {@inheritDoc}
     */
    public function setObjetDoc($objetDoc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObjetDoc', [$objetDoc]);

        return parent::setObjetDoc($objetDoc);
    }

    /**
     * {@inheritDoc}
     */
    public function getObjetDoc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjetDoc', []);

        return parent::getObjetDoc();
    }

    /**
     * {@inheritDoc}
     */
    public function setContenuDoc($contenuDoc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContenuDoc', [$contenuDoc]);

        return parent::setContenuDoc($contenuDoc);
    }

    /**
     * {@inheritDoc}
     */
    public function getContenuDoc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContenuDoc', []);

        return parent::getContenuDoc();
    }

    /**
     * {@inheritDoc}
     */
    public function setOranDoc($oranDoc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOranDoc', [$oranDoc]);

        return parent::setOranDoc($oranDoc);
    }

    /**
     * {@inheritDoc}
     */
    public function getOranDoc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOranDoc', []);

        return parent::getOranDoc();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogoDoc($logoDoc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogoDoc', [$logoDoc]);

        return parent::setLogoDoc($logoDoc);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogoDoc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogoDoc', []);

        return parent::getLogoDoc();
    }

}
